<?xml version="1.0" encoding="utf-8"?>
<?jelly escape-by-default='true'?>
<!--
 ~ The MIT License
 ~
 ~ Copyright (c) 2011-2013, CloudBees, Inc., Stephen Connolly.
 ~
 ~ Permission is hereby granted, free of charge, to any person obtaining a copy
 ~ of this software and associated documentation files (the "Software"), to deal
 ~ in the Software without restriction, including without limitation the rights
 ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 ~ copies of the Software, and to permit persons to whom the Software is
 ~ furnished to do so, subject to the following conditions:
 ~
 ~ The above copyright notice and this permission notice shall be included in
 ~ all copies or substantial portions of the Software.
 ~
 ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 ~ THE SOFTWARE.
 -->

<j:jelly xmlns:j="jelly:core" xmlns:f="/lib/form">
    <j:set var="divId" value="${h.generateId()}"/>
    <j:set var="fileId" value="${h.generateId()}"/>
    <f:entry field="uploadedKeystore">
        <!-- 
        TODO We have to use a custom behavior as the ../password is not completely supported, 
        the registerValidator being called before applyNameRef in hudson-behavior, we cannot rely on the built-in feature
        Could be simplified when https://issues.jenkins.io/browse/JENKINS-65616 is corrected. 
        -->
        
        <!-- $$ => $ after jelly interpretation -->
        <f:textbox id="${divId}" style="display:none" default="${descriptor.DEFAULT_VALUE}" checkMethod="post"
                   checkUrl="'${rootURL}/descriptorByName/com.cloudbees.plugins.credentials.impl.CertificateCredentialsImpl$$UploadedKeyStoreSource/checkUploadedKeystore?'+fillValues_${divId}(this)"
                   />
    </f:entry>
    <f:entry field="uploadedCertFile">
        <!-- TODO switch to f:file after baseline includes https://github.com/jenkinsci/jenkins/pull/7452 -->
        <input id="${fileId}" type="file" name="uploadedCertFile" class="jenkins-file-upload" jsonAware="true" />
    </f:entry>
  <script><![CDATA[
    var uploadedCertFile_${fileId} = '';
    (function(){
      // Adding a onChange method on the file input to retrieve the value of the file content in a variable
      var uploadedCertFileInput = window.document.getElementById("${fileId}");
      var _onchange = uploadedCertFileInput.onchange;
      if(typeof _onchange === "function") {
        uploadedCertFileInput.onchange = function() { fileOnChange(this); _onchange.call(this); }
      } else {
        uploadedCertFileInput.onchange = fileOnChange.bind(uploadedCertFileInput);
      }
      function fileOnChange() {
        try { // inspired by https://stackoverflow.com/a/754398
          var uploadedCertFileInputFile = uploadedCertFileInput.files[0];
          var reader = new FileReader();
          reader.onload = function (evt) {
            uploadedCertFile_${fileId} = btoa(evt.target.result);
            var uploadedKeystore = document.getElementById("${divId}");
            uploadedKeystore.onchange(uploadedKeystore);
          }
          reader.onerror = function (evt) {
            if (window.console !== null) {
              console.warn("Error during loading uploadedCertFile content", evt);
            }
            uploadedCertFile_${fileId} = '';
          }

          reader.readAsBinaryString(uploadedCertFileInputFile);
        }
        catch(e){
          if (window.console !== null) {
            console.warn("Unable to retrieve uploadedCertFile content");
          }
        }
      }
    })();
    
    function fillValues_${divId}(el) {
      var value = el.value;
      var password = findNextFormItem(el, 'password').value;
      var uploadedCertFile = uploadedCertFile_${fileId};
      return "value="+encodeURIComponent(value)+"&password="+encodeURIComponent(password)+"&uploadedCertFile="+encodeURIComponent(uploadedCertFile);
    }
    
    // workaround for JENKINS-19124
    // without this script, the password changes will be not trigger the check on the uploadedKeystore
    window.setTimeout(function(){
      var r = window.document.getElementById("${divId}");
      var p = findNextFormItem(r, 'password');
      if (p) {
        var _onchange = p.onchange;
        var _field = r;
        if(typeof _onchange=="function") {
            p.onchange = function() { _field.onchange(_field); _onchange.call(this); }
        } else {
            p.onchange = function() { _field.onchange(_field); };
        }
      }
      r = null;
      p = null;
    }, 500);
  ]]></script>
</j:jelly>
